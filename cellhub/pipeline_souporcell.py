'''
===================
Pipeline Souporcell
===================


Overview
========

This pipeline performs the following steps:
* Demultiplex cells with or without genotype informationin in each input

Configuration
-------------

The pipeline requires a configured file:`pipeline_souporcell.yml` file.

Default configuration files can be generated by executing:
   cellhub souporcell config

Input files
-----------

* Must allow bam file generation when running cellhub cellranger_multi step: "possorted_genome_bam.bam" file and "barcodes.tsv" as output from cellranger is required for demultiplexing pipeline.

* For genotype-aware demultiplexing, a list of known variants for
each individual should be provided.

Dependencies
------------

Download singularity image (1.3gb) with command:
singularity pull shub://wheaton5/souporcell

Pipeline output
===============

* clusters.tsv saved in a '/souporcell_output.dir/<sample_name>/' folder,
with the cell barcode, singlet/doublet status, cluster,
log_loss_singleton, log_loss_doublet, followed by log loss for each cluster.

* cluster_genotypes.vcf saved in a '/souporcell_output.dir/<sample_name>/'
folder, which is a vcf with genotypes for each cluster.

* ambient_rna.txt saved in a '/souporcell_output.dir/<sample_name>/' folder,
which contains the ambient RNA percentage detected.


Code
====
c
'''



from ruffus import *

import sys
import os
import re
import sqlite3
import pandas as pd
import numpy as np
import glob
from pathlib import Path

import cgatcore.experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
import cgatcore.database as database

import cellhub.tasks as T

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# -------------------------- < parse parameters > --------------------------- #

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))

# set the location of the code directory
PARAMS["cellhub_code_dir"] = Path(__file__).parents[1]

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))


# ########################################################################### #
# ############################ run souporcell tasks ######################### #
# ########################################################################### #

@transform("cellranger.multi.dir/*/outs/per_sample_outs/*/count/sample_alignments.bam", regex(r"cellranger.multi.dir/(.*)/outs/per_sample_outs/(.*)/count/sample_alignments.bam"),
           r"demultiplex.dir/souporcell_output.dir/\1/\1.souporcell.sentinel")
def souporcell(infile, outfile):
    '''
    Run souporcell
    '''

    # input: read sample name and bam file path
    sample_name = os.path.basename(outfile)[:-len(".souporcell.sentinel")]
    input_dir = os.path.realpath(os.path.dirname(infile))
    input_bam = os.path.join(input_dir, 'sample_alignments.bam')
    input_barcode = os.path.join(input_dir, 'sample_filtered_feature_bc_matrix/barcodes.tsv.gz')

    # output: specifying log file and output folder
    output_folder = os.path.dirname(os.path.realpath(outfile))
    log_file = os.path.realpath(outfile.replace(".sentinel",".log"))

    # read other parameters from yml file
    genome_reference = PARAMS['genome-reference']
    job_threads = PARAMS['souporcell_threads']
    cluster_num = PARAMS['souporcell_cluster-number']
    if PARAMS['souporcell_genotype-aware']:
        vcf_file = PARAMS['souporcell_vcf-file']
        sample_names = PARAMS['souporcell_sample-names']

    # run souporcell
    container_dir = PARAMS['souporcell_container-dir']
    bind_path = PARAMS['souporcell_bind-path']
    if PARAMS['souporcell_genotype-aware']:
        statement = '''
        cd demultiplex.dir;
        singularity exec --bind %(bind_path)s:%(bind_path)s %(container_dir)s souporcell_pipeline.py
        -i %(input_bam)s
        -b %(input_barcode)s
        -f %(genome_reference)s
        -o %(output_folder)s
        -k %(cluster_num)s
        -t %(job_threads)s
        --known_genotypes %(vcf_file)s
        --known_genotypes_sample_names %(sample_names)s
        &> %(log_file)s
        '''
    else:
        statement = '''
        cd demultiplex.dir;
        singularity exec --bind %(bind_path)s:%(bind_path)s %(container_dir)s souporcell_pipeline.py
        -i %(input_bam)s
        -b %(input_barcode)s
        -f %(genome_reference)s
        -o %(output_folder)s
        -k %(cluster_num)s
        -t %(job_threads)s
        &> %(log_file)s
        '''

    P.run(statement)

    IOTools.touch_file(outfile)


@transform(souporcell, regex(r".*/.*/.*/(.*).souporcell.sentinel"),
           r"demultiplex.dir/souporcell_output.dir/\1/\1.postsouporcell.sentinel")
def postsouporcell(infile, outfile):
    '''
    Format ouput to match tables in other cellhub pipelines
    '''
    souporcell_dir = os.path.dirname(infile)
    library_id = os.path.basename(infile)[:-len(".souporcell.sentinel")]
    cluster_file = os.path.join(souporcell_dir,"clusters.tsv")
    statement = '''
    cd %(souporcell_dir)s;
    awk '{if ($0 ~ /^barcode/) print "library_id\\t"$0; else print "%(library_id)s\\t"$0};' clusters.tsv > %(library_id)s.tsv
   '''

    P.run(statement)

    IOTools.touch_file(outfile)


@merge(postsouporcell,
      "demultiplex.dir/souporcell.api.sentinel")
def souporcellAPI(infiles, outfile):
    '''
    Register the souporcell results on the API
    '''

    x = T.api("demultiplex")

    file_set = {}

    for f in infiles:
        library_id = os.path.basename(f)[:-len(".postsouporcell.sentinel")]
        cluster_path = os.path.join(os.path.dirname(f), library_id + ".tsv")

        file_set[library_id] = {"path": cluster_path,
                                "description": "Souporcell demultiplexing results for " + \
                                            library_id,
                                "format": "tsv"}

        x.define_dataset(analysis_name="souporcell",
                   file_set = file_set,
                   analysis_description = "demultiplex result from souporcell")

        x.register_dataset()

    IOTools.touch_file(outfile)

# ########################################################################### #
# ##################### full target: to run all tasks ####################### #
# ########################################################################### #


@follows(mkdir("demultiplex.dir"))
@follows(souporcellAPI)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
