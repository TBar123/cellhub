'''
================
Pipeline clean ambient RNA
================

Overview
========
This pipeline uses CellBender to remove ambient UMI counts.

Configuration
-------------
The pipeline requires a configured :file:`pipeline_clean_ambient.yml` file. Default configuration files can be generated by executing: ::

   cellhub cellbender config


Input files
-----------

This pipeline requires the unfiltered gene-expression h5 files from
the cellranger-multi pipeline


Running the pipeline
--------------------

It is recommended to run the cellbender task on a gpu queue.

On the BMRC cluster, this can be achieved with e.g. ::

    cellhub cellbender make full -v5 -p 200 --cluster-queue=short.qg --cluster-options "-l gpu=1,gputype=p100"


Pipeline output
===============

The pipeline registers cleaned h5 files on the cellhub api.

Code
====

'''


from ruffus import *
from ruffus.combinatorics import *
import sys
import os
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
from pathlib import Path
import pandas as pd
import glob

import cellhub.tasks.control as C
import cellhub.tasks.TASK as TASK
import cellhub.tasks.api as api

import scanpy as sc

# Override function to collect config files
P.control.write_config_files = C.write_config_files


# -------------------------- < parse parameters > --------------------------- #


# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline_cellbender.yml" % os.path.splitext(__file__)[0],
     "../pipeline_cellbender.yml",
     "pipeline_cellbender.yml"])

# set the location of the code directory
PARAMS["cellhub_code_dir"] = Path(__file__).parents[1]

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))


# ############################################################################ #
# #################### Calculate seq depth distributions  #################### #
# ############################################################################ #


# e.g. filtered api/cellranger.multi/counts/filtered/GSM2560248/h5/
# api/cellranger.multi/counts/unfiltered/GSM2560248/h5/
print(PARAMS)

@follows(mkdir("cellbender.dir"))
@transform(glob.glob("api/cellranger.multi/counts/unfiltered/*/h5/raw_feature_bc_matrix.h5"),
           regex(r".*/.*/.*/.*/(.*)/h5/raw_feature_bc_matrix.h5"),
           r"cellbender.dir/\1/cellbender.sentinel")
def cellbender(infile, outfile):
    '''
    This task will run the CellBender comand.
    Please visit cellbender.readthedocs.io for further details.
    '''
    
    spec, SPEC = TASK.get_vars(infile, outfile, PARAMS)

    job_threads, job_memory, r_memory = TASK.get_resources(
        memory=PARAMS["resources_memory"], cpu=PARAMS["resources_cpu"],
        PARAMS=PARAMS)
        
    sample = str(os.path.basename(Path(infile).parents[1]))
    
    if PARAMS["cellbender_cuda"]:
        cuda_stat = "--cuda"
    else:
        cuda_stat = ""
        
    sample_key = "samples_" + sample #
   
    expected_cells = PARAMS[sample_key]["expected_cells"]
    total_droplets = PARAMS[sample_key]["total_droplets_included"]
    
    out_file = outfile.replace(".sentinel", ".h5")
    
    # Formulate and run statement
    statement = '''cellbender remove-background
                 --input=%(infile)s
                 --output=%(out_file)s 
                 --model=%(cellbender_model)s
                 %(cuda_stat)s
                 --expected-cells=%(expected_cells)s
                 --total-droplets-included=%(total_droplets)s
                 --fpr=%(cellbender_fpr)s
                 --epochs=%(cellbender_epochs)s
                 --learning-rate=%(cellbender_learning_rate)s
                 --low-count-threshold=%(cellbender_low_count_threshold)s
                 &> %(log_file)s
              ''' % dict(PARAMS, **SPEC, **locals())
    
    #print(statement)        
    P.run(statement)

    IOTools.touch_file(outfile)



@transform(cellbender,
           regex(r"cellbender.dir/(.*)/cellbender.sentinel"),
           r"cellbender.dir/\1/register.h5.sentinel")
def h5API(infile, outfile):
    '''
    Put the h5 files on the API

    Inputs:

        The input cellbender.dir folder layout is:

        unfiltered "outs": ::

            library_id/cellbender.h5

        filtered "outs": ::

            library_id/cellbender_filtered.h5

    '''
    x = api.api("cellbender")

    out_dir = os.path.dirname(outfile)

    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    library_id = infile.split("/")[1]

    h5_template = {"h5": {"path":"path/to/barcodes.tsv",
                          "format": "h5",
                          "description": "Cellbender h5 count file"}
                     }

    # 1. deal with unfiltered count data
    h5_location = os.path.join("cellbender.dir", library_id,
                                "cellbender.h5")

    h5_x = h5_template.copy()
    h5_x["h5"]["path"] = h5_location

    x.define_dataset(analysis_name="counts",
                     data_subset="unfiltered",
                     data_id=library_id,
                     data_format="h5",
                     file_set=h5_x,
                     analysis_description="Cellbender h5 file")


    x.register_dataset()


    # 2. deal with per sample libraries
    h5_location = os.path.join("cellbender.dir",
                                  library_id,
                                  "cellbender_filtered.h5")

    h5_x = h5_template.copy()
    h5_x["h5"]["path"] = h5_location

    x.define_dataset(analysis_name="counts",
                        data_subset="filtered",
                        data_id=library_id,
                        data_format="h5",
                        file_set=h5_x,
                        analysis_description="Cellbender h5 file")

    x.register_dataset()

    IOTools.touch_file(outfile)

# ---------------------------------------------------
# Generic pipeline tasks






@follows(cellbender)
def full():
    '''
    Run the full pipeline.
    '''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
